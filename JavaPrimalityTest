The java.math.BigInteger.isProbablePrime(int certainty) method is used to tell if this BigInteger is probably 
prime or if it’s definitely composite. This method checks for prime or composite upon the current BigInteger by
which this method is called and returns a boolean value. It returns true if this BigInteger is probably prime, 
false if it’s definitely composite. If certainty is <= 0, true is returned.



// github.com/RodneyShag

import java.util.Scanner;
import java.math.BigInteger;

/*
I use isProbablePrime() with certainty = 10 to achieve 99.9% accuracy. 
However, even certainty = 1 (which achieves 50% accuracy) is enough to 
pass the HackerRank test cases.
isProbablePrime() is always 100% certain if it tells you if a number 
is "not prime". If it says "prime", it's only 99.9% certain. It may be 
the case that it just hasn't found a prime number number that divides 
the BigInteger yet.
*/
public class Solution {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        BigInteger n = scan.nextBigInteger();
        scan.close();
        System.out.println(n.isProbablePrime(10) ? "prime" : "not prime");
    }
}
Footer
© 2022 G
